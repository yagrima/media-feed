version: '3.8'

services:
  db:
    image: postgres:15-alpine
    container_name: mefeed_db_prod
    environment:
      POSTGRES_DB_FILE: /run/secrets/db_name
      POSTGRES_USER_FILE: /run/secrets/db_user
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
    secrets:
      - db_name
      - db_user
      - db_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$(cat /run/secrets/db_user)"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    image: redis:7-alpine
    container_name: mefeed_redis_prod
    command: redis-server --requirepass ${REDIS_PASSWORD}
    secrets:
      - redis_password
    volumes:
      - redis_data:/data
    networks:
      - backend-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  backend:
    image: yagrima/mefeed-backend:${TAG:-staging}
    container_name: mefeed_backend_prod
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env.prod
    secrets:
      - db_user
      - db_password
      - db_name
      - redis_password
      - jwt_private_key
      - jwt_public_key
      - encryption_key
      - secret_key
      - smtp_password
    ports:
      - "8000:8000"
    networks:
      - backend-network
      - frontend-network
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  celery:
    image: yagrima/mefeed-backend:${TAG:-staging}
    container_name: mefeed_celery_prod
    command: celery -A app.celery_app.celery_app worker --beat --loglevel=info
    depends_on:
      - db
      - redis
    env_file:
      - .env.prod
    secrets:
      - db_user
      - db_password
      - db_name
      - redis_password
      - encryption_key
    networks:
      - backend-network
    volumes:
      - ./logs:/app/logs
      - celery_data:/tmp/celery
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  frontend:
    image: yagrima/mefeed-frontend:${TAG:-staging}
    container_name: m心目eed_frontend_prod
    depends_on:
      - backend
    ports:
      - "3000:80"
    environment:
      - NEXT_PUBLIC_API_URL=${FRONTEND_API_URL:-https://api.mefeed.com}
      - NODE_ENV=production
    networks:
      - frontend-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  nginx:
    image: nginx:alpine
    container_name: mefeed_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - frontend-network
      - backend-network
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  monitoring:
    image: grafana/grafana:latest
    container_name: mefeed_grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - backend-network
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: mefeed_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - backend-network
    restart: unless-stopped

secrets:
  db_name:
    file: "${MEFEED_SECRETS_DIR}/secrets/prod/db_name.txt"
  db_user:
    file: "${MEFEED_SECRETS_DIR}/secrets/prod/db_user.txt"
  db_password:
    file: "${MEFEED_SECRETS_DIR}/secrets/prod/db_password.txt"
  redis_password:
    file: "${MEFEED_SECRETS_DIR}/secrets/prod/redis_password.txt"
  jwt_private_key:
    file: "${MEFEED_SECRETS_DIR}/secrets/jwt_private.pem"
  jwt_public_key:
    file: "${MEFEED_SECRETS_DIR}/secrets/jwt_public.pem"
  encryption_key:
    file: "${MEFEED_SECRETS_DIR}/secrets/encryption.key"
  secret_key:
    file: "${MEFEED_SECRETS_DIR}/secrets/secret_key.txt"
  smtp_password:
    file: "${MEFEED_SECRETS_DIR}/secrets/prod/smtp_password.txt"

networks:
  backend-network:
    driver: bridge
    internal: true
  frontend-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  celery_data:
  grafana_data:
  prometheus_data:
