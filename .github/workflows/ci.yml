name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: "3.12"
  NODE_VERSION: "20"

jobs:
  # Backend Testing & Security
  backend-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ "3.12", "3.13" ]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
        
    - name: Security scan with safety
      run: |
        cd backend
        safety check
        bandit -r app/ -f json -o bandit-report.json || true
        
    - name: Run tests with coverage
      run: |
        cd backend
        pytest --cov=app --cov-report=xml --cov-report=json tests/
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        
    - name: Build Docker image
      run: |
        cd backend
        docker build -f Dockerfile -t mefeed-backend:test .
        
    - name: Security scan on Docker image
      run: |
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v $PWD:/root/.cache/ aquasec/trivy image --exit-code 0 --no-progress --format table mefeed-backend:test

  # Frontend Testing
  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Security audit
      run: |
        cd frontend
        npm audit --audit-level high
        
    - name: Run tests
      run: |
        cd frontend
        npm test
        
    - name: Type check
      run: |
        cd frontend
        npm run type-check
        
    - name: Build application
      run: |
        cd frontend
        npm run build
        
    - name: Build Docker image
      run: |
        cd frontend
        docker build -f Dockerfile -t mefeed-frontend:test .

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: test_mefeed
          POSTGRES_USER: postgres_user
          POSTGRES_PASSWORD: postgres_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install backend dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        pip install pytest pytest-asyncio
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Export environment variables
      run: |
        cd backend
        cat > .env << EOF
        DATABASE_URL=postgresql+asyncpg://postgres_user:postgres_password@localhost:5432/test_mefeed
        REDIS_URL=redis://localhost:6379
        SECRET_KEY=test_secret_key_for_ci_only_do_not_use_in_production
        DEBUG=true
        ENFORCE_HTTPS=false
        EOF
        
    - name: Run database migrations
      run: |
        cd backend
        alembic upgrade head
        
    - name: Start backend
      run: |
        cd backend
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
        
    - name: Start frontend
      run: |
        cd frontend
        npm run build
        npm run preview --port 3000 &
        sleep 10
        
    - name: Run integration tests
      run: |
        cd backend
        python ../scripts/integration_test.py || true

  # Deploy to staging on main branch
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, integration-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: |
          yagrima/mefeed-backend:staging
          yagrima/mefeed-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: |
          yagrima/mefeed-frontend:staging
          yagrima/mefeed-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Deploy to staging
      run: |
        echo "Deploy to staging environment"
        # Add actual deployment commands here

  # Production deployment on release
  deploy-production:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production
      run: |
        echo "Deploy to production environment"
        # Add actual production deployment commands here
